<?xml version="1.0" encoding="UTF-8"?>

<project name="Build Paybox" default="Paybox_Payment_Module" basedir="../">
    <!-- value can be: major, minor, bugfix -->
    <property name="releasetype" value="MINOR"/>
    <property name="paybox.version" value="1.2"/>
    <property file="vm_build/build.properties"/>
    <target name="title">
        <echo message="BUILD PAYBOX package FROM ${export.to}  TO ${package.abspath}"/>
    </target>

    <property name="paybox.filename" value="paybox-vm1.${paybox.version}"/>
    <property name="readme.file.from" value="${export.to}/vm_build"/>
    <property name="package.folder" value="${package.abspath}/${paybox.filename}_extract_first"/>
    <property name="svn.paybox.repository" value="https://dev.virtuemart.net/svn/virtuemart/branches/virtuemart-1.1/Paybox/"/>

    <svnlastrevision
            svnpath="{$svn.path}"
            repositoryurl="${svn.paybox.repository}"
            propertyname="svn.lastrevision"/>

    <!-- ============================================  -->
    <!-- used in version.php , and .xml files variables -->
    <!-- ============================================  -->
    <tstamp/>
    <property name="PHING.VM.PRODUCT" value="VirtueMart"/>
    <property name="PHING.VM.RELEASE" value="${paybox.version}"/>
    <property name="PHING.VM.DEV_STATUS" value="${releasetype}"/>

    <property name="PHING.VM.RELDATE" value="${TODAY}"/>
    <property name="PHING.VM.RELTIME" value="${TSTAMP}"/>
    <property name="PHING.VM.RELTZ" value="GMT"/>
    <property name="PHING.VM.REVISION" value="${svn.lastrevision}"/>
    <tstamp>
        <format property="PHING.VM.YEAR" pattern="%Y"/>
    </tstamp>
    <property name="PHING.VM.COPYRIGHT" value="Copyright (C) 2004-${PHING.VM.YEAR} Virtuemart Team. All rights reserved."/>
    <property name="PHING.VM.LICENSE" value="http://www.gnu.org/licenses/gpl-2.0.html GNU/GPL"/>


    <!-- ============================================  -->
    <!-- DELETE OLD VERSION IF EXIST -->
    <!-- ============================================  -->
    <target name="delete_package_folder" depends="">
        <available file="${package.folder}" property="package.folder.exists" value="1"/>
        <if>
            <equals arg1="${package.folder.exists}" arg2="1"/>
            <then>
                <echo message="Deleting existing package folder: ${package.folder}..."/>
                <delete dir="${package.folder}"/>
            </then>
        </if>
    </target>

    <!-- SVN EXPORT Force overwrite files if they already exist: may be not needed-->
    <target name="delete_export_to_folder">
        <available file="${export.to}" property="export.to.path.exists" value="1"/>
        <if>
            <equals arg1="${export.from.repository}" arg2="1"/>
            <then>
                <echo message="Deleting existing build folder: ${export.to}..."/>
                <delete dir="${export.to}"/>
            </then>
            <else>
                <echo message="Don't delete files from ${export.to} folder"/>
            </else>
        </if>
    </target>


    <fileset dir="${readme.file.from}" id='readme.main.file' defaultexcludes="true">
        <include name="README-VIRTUEMART-PAYBOX.txt"/>
    </fileset>



    <!-- ============================================  -->
    <!-- (DEFAULT)  SVN export            -->
    <!-- ============================================  -->
    <target name="svn.export">
        <if>
            <equals arg1="${export.from.repository}" arg2="1"/>
            <then>
                <echo message="Export from svn"/>
                <svnexport
                        svnpath="{$svn.path}"
                        nocache="true"
                        repositoryurl="${svn.paybox.repository}"
                        todir="${export.to}"/>
            </then>
            <else>
                <echo message="Don't Export from svn repository"/>
            </else>
        </if>

    </target>

    <target name="create_package_folder">
        <echo msg="Create Package destination directory"/>
        <mkdir dir="${package.folder}"/>
    </target>
    <!-- ============================================  -->
    <!-- (DEFAULT)  CREATE TAR FILES                -->
    <!-- ============================================  -->
    <target name="clean" depends="delete_package_folder, delete_export_to_folder,  create_package_folder">
        <echo msg="Cleaning Package directory OK!"/>
    </target>

    <fileset dir="${export.to}" id='paybox.refid' defaultexcludes="true">
        <include name="**"/>
        <exclude name="vm_build/**"/>
        <exclude name=".svn"/>
        <exclude name=".DS_Store"/>
        <exclude name="index.html"/>
    </fileset>



    <target name="Paybox_Payment_Module" depends="title, clean ,svn.export">
        <echo msg="LATEST REVISION is ${svn.lastrevision}"/>
        <echo msg="DATE ${TODAY}, TIME ${TSTAMP}"/>
        <echo msg="Creating Paybox PACKAGE  ..."/>
        <copy todir="${package.folder}">
            <fileset refid="paybox.refid"/>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        <echo msg="Copying README file to directory..."/>
        <copy todir="${package.folder}">
            <fileset refid="readme.main.file"/>
        </copy>
        <zip destfile="${package.folder}.zip">
            <fileset dir="${package.folder}">
                <exclude name="vm_build"/>
                <exclude name=".svn"/>
                <exclude name=".DS_Store"/>
            </fileset>
        </zip>
        <echo msg="Paybox  Payment Module compressed OK!"/>
    </target>



</project>
